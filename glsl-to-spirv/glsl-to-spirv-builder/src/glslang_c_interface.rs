#![allow(warnings)]

/* automatically generated by rust-bindgen 0.55.1 */

pub const __bool_true_false_are_defined: u32 = 1;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_pctype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_mb_cur_max as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_lc_codepage as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).locinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).mbcinfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Wchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Byte as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._State as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
extern "C" {
    pub fn _calloc_base(_Count: size_t, _Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        _Count: ::std::os::raw::c_ulonglong,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _callnewh(_Size: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _expand(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _malloc_base(_Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(_Size: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _realloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _aligned_malloc(_Size: size_t, _Alignment: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_msize(
        _Block: *mut ::std::os::raw::c_void,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __threadid() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __threadhandle() -> usize;
}
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort_s(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn bsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
extern "C" {
    pub fn _lfind_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstod(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstod_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstol(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wcstol_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoll(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoll_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoul(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _wcstoul_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoull(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoull_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstold(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstold_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstof(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn _wcstof_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn _wtof(_String: *const wchar_t) -> f64;
}
extern "C" {
    pub fn _wtof_l(_String: *const wchar_t, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _wtoi(_String: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtoi_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtol(_String: *const wchar_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtol_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtoll(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoll_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtoi64(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoi64_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoui64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoui64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wfullpath(
        _Buffer: *mut wchar_t,
        _Path: *const wchar_t,
        _BufferCount: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut wchar_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    );
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _Dir: *mut wchar_t,
        _Filename: *mut wchar_t,
        _Ext: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _DriveCount: size_t,
        _Dir: *mut wchar_t,
        _DirCount: size_t,
        _Filename: *mut wchar_t,
        _FilenameCount: size_t,
        _Ext: *mut wchar_t,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut wchar_t,
        _BufferCount: *mut size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wputenv(_EnvString: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _ResultPath: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsystem(_Command: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn _set_abort_behavior(
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrMsg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut wchar_t) -> errno_t;
}
extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__div_t() {
    assert_eq!(
        ::std::mem::size_of::<_div_t>(),
        8usize,
        concat!("Size of: ", stringify!(_div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldiv_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(_lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type lldiv_t = _lldiv_t;
extern "C" {
    pub fn abs(_Number: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(_Number: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _abs64(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _byteswap_ushort(_Number: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _byteswap_ulong(_Number: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _byteswap_uint64(_Number: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int, _Denominator: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long, _Denominator: ::std::os::raw::c_long)
        -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        _Numerator: ::std::os::raw::c_longlong,
        _Denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn _rotl(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotl(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotl64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rotr(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotr(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotr64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[test]
fn bindgen_test_layout__LDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LDOUBLE>(),
        10usize,
        concat!("Size of: ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDOUBLE>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LDOUBLE>())).ld as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDOUBLE),
            "::",
            stringify!(ld)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__CRT_DOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CRT_DOUBLE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_DOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[test]
fn bindgen_test_layout__CRT_FLOAT() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Size of: ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Alignment of ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CRT_FLOAT>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_FLOAT),
            "::",
            stringify!(f)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__LONGDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LONGDOUBLE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LONGDOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[test]
fn bindgen_test_layout__LDBL12() {
    assert_eq!(
        ::std::mem::size_of::<_LDBL12>(),
        12usize,
        concat!("Size of: ", stringify!(_LDBL12))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDBL12>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDBL12))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LDBL12>())).ld12 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDBL12),
            "::",
            stringify!(ld12)
        )
    );
}
extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _atoi_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atol_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _atoll_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoflt(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtof(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn _strtof_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtod(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtod_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtold(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtold_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _strtol_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoll(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoll_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _strtoul_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoull_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoi64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoui64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _itoa_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ltoa_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ultoa_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _i64toa_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64toa(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ui64toa_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64toa(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn mbstowcs(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const wchar_t,
        _MaxCountInBytes: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const wchar_t,
        _MaxCountInBytes: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn _fullpath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _BufferCount: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _makepath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveCount: size_t,
        _Dir: *mut ::std::os::raw::c_char,
        _DirCount: size_t,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameCount: size_t,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut ::std::os::raw::c_char,
        _BufferCount: *mut size_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv_s(
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
pub const glslang_stage_t_GLSLANG_STAGE_VERTEX: glslang_stage_t = 0;
pub const glslang_stage_t_GLSLANG_STAGE_TESSCONTROL: glslang_stage_t = 1;
pub const glslang_stage_t_GLSLANG_STAGE_TESSEVALUATION: glslang_stage_t = 2;
pub const glslang_stage_t_GLSLANG_STAGE_GEOMETRY: glslang_stage_t = 3;
pub const glslang_stage_t_GLSLANG_STAGE_FRAGMENT: glslang_stage_t = 4;
pub const glslang_stage_t_GLSLANG_STAGE_COMPUTE: glslang_stage_t = 5;
pub const glslang_stage_t_GLSLANG_STAGE_RAYGEN_NV: glslang_stage_t = 6;
pub const glslang_stage_t_GLSLANG_STAGE_INTERSECT_NV: glslang_stage_t = 7;
pub const glslang_stage_t_GLSLANG_STAGE_ANYHIT_NV: glslang_stage_t = 8;
pub const glslang_stage_t_GLSLANG_STAGE_CLOSESTHIT_NV: glslang_stage_t = 9;
pub const glslang_stage_t_GLSLANG_STAGE_MISS_NV: glslang_stage_t = 10;
pub const glslang_stage_t_GLSLANG_STAGE_CALLABLE_NV: glslang_stage_t = 11;
pub const glslang_stage_t_GLSLANG_STAGE_TASK_NV: glslang_stage_t = 12;
pub const glslang_stage_t_GLSLANG_STAGE_MESH_NV: glslang_stage_t = 13;
pub const glslang_stage_t_GLSLANG_STAGE_COUNT: glslang_stage_t = 14;
pub type glslang_stage_t = ::std::os::raw::c_int;
pub const glslang_stage_mask_t_GLSLANG_STAGE_VERTEX_MASK: glslang_stage_mask_t = 1;
pub const glslang_stage_mask_t_GLSLANG_STAGE_TESSCONTROL_MASK: glslang_stage_mask_t = 2;
pub const glslang_stage_mask_t_GLSLANG_STAGE_TESSEVALUATION_MASK: glslang_stage_mask_t = 4;
pub const glslang_stage_mask_t_GLSLANG_STAGE_GEOMETRY_MASK: glslang_stage_mask_t = 8;
pub const glslang_stage_mask_t_GLSLANG_STAGE_FRAGMENT_MASK: glslang_stage_mask_t = 16;
pub const glslang_stage_mask_t_GLSLANG_STAGE_COMPUTE_MASK: glslang_stage_mask_t = 32;
pub const glslang_stage_mask_t_GLSLANG_STAGE_RAYGEN_NV_MASK: glslang_stage_mask_t = 64;
pub const glslang_stage_mask_t_GLSLANG_STAGE_INTERSECT_NV_MASK: glslang_stage_mask_t = 128;
pub const glslang_stage_mask_t_GLSLANG_STAGE_ANYHIT_NV_MASK: glslang_stage_mask_t = 256;
pub const glslang_stage_mask_t_GLSLANG_STAGE_CLOSESTHIT_NV_MASK: glslang_stage_mask_t = 512;
pub const glslang_stage_mask_t_GLSLANG_STAGE_MISS_NV_MASK: glslang_stage_mask_t = 1024;
pub const glslang_stage_mask_t_GLSLANG_STAGE_CALLABLE_NV_MASK: glslang_stage_mask_t = 2048;
pub const glslang_stage_mask_t_GLSLANG_STAGE_TASK_NV_MASK: glslang_stage_mask_t = 4096;
pub const glslang_stage_mask_t_GLSLANG_STAGE_MESH_NV_MASK: glslang_stage_mask_t = 8192;
pub const glslang_stage_mask_t_GLSLANG_STAGE_MASK_COUNT: glslang_stage_mask_t = 8193;
pub type glslang_stage_mask_t = ::std::os::raw::c_int;
pub const glslang_source_t_GLSLANG_SOURCE_NONE: glslang_source_t = 0;
pub const glslang_source_t_GLSLANG_SOURCE_GLSL: glslang_source_t = 1;
pub const glslang_source_t_GLSLANG_SOURCE_HLSL: glslang_source_t = 2;
pub const glslang_source_t_GLSLANG_SOURCE_COUNT: glslang_source_t = 3;
pub type glslang_source_t = ::std::os::raw::c_int;
pub const glslang_client_t_GLSLANG_CLIENT_NONE: glslang_client_t = 0;
pub const glslang_client_t_GLSLANG_CLIENT_VULKAN: glslang_client_t = 1;
pub const glslang_client_t_GLSLANG_CLIENT_OPENGL: glslang_client_t = 2;
pub const glslang_client_t_GLSLANG_CLIENT_COUNT: glslang_client_t = 3;
pub type glslang_client_t = ::std::os::raw::c_int;
pub const glslang_target_language_t_GLSLANG_TARGET_NONE: glslang_target_language_t = 0;
pub const glslang_target_language_t_GLSLANG_TARGET_SPV: glslang_target_language_t = 1;
pub const glslang_target_language_t_GLSLANG_TARGET_COUNT: glslang_target_language_t = 2;
pub type glslang_target_language_t = ::std::os::raw::c_int;
pub const glslang_target_client_version_t_GLSLANG_TARGET_VULKAN_1_0:
    glslang_target_client_version_t = 4194304;
pub const glslang_target_client_version_t_GLSLANG_TARGET_VULKAN_1_1:
    glslang_target_client_version_t = 4198400;
pub const glslang_target_client_version_t_GLSLANG_TARGET_OPENGL_450:
    glslang_target_client_version_t = 450;
pub const glslang_target_client_version_t_GLSLANG_TARGET_CLIENT_VERSION_COUNT:
    glslang_target_client_version_t = 451;
pub type glslang_target_client_version_t = ::std::os::raw::c_int;
pub const glslang_target_language_version_t_GLSLANG_TARGET_SPV_1_0:
    glslang_target_language_version_t = 65536;
pub const glslang_target_language_version_t_GLSLANG_TARGET_SPV_1_1:
    glslang_target_language_version_t = 65792;
pub const glslang_target_language_version_t_GLSLANG_TARGET_SPV_1_2:
    glslang_target_language_version_t = 66048;
pub const glslang_target_language_version_t_GLSLANG_TARGET_SPV_1_3:
    glslang_target_language_version_t = 66304;
pub const glslang_target_language_version_t_GLSLANG_TARGET_SPV_1_4:
    glslang_target_language_version_t = 66560;
pub const glslang_target_language_version_t_GLSLANG_TARGET_SPV_1_5:
    glslang_target_language_version_t = 66816;
pub const glslang_target_language_version_t_GLSLANG_TARGET_LANGUAGE_VERSION_COUNT:
    glslang_target_language_version_t = 66817;
pub type glslang_target_language_version_t = ::std::os::raw::c_int;
pub const glslang_executable_t_GLSLANG_EX_VERTEX_FRAGMENT: glslang_executable_t = 0;
pub const glslang_executable_t_GLSLANG_EX_FRAGMENT: glslang_executable_t = 1;
pub type glslang_executable_t = ::std::os::raw::c_int;
pub const glslang_optimization_level_t_GLSLANG_OPT_NO_GENERATION: glslang_optimization_level_t = 0;
pub const glslang_optimization_level_t_GLSLANG_OPT_NONE: glslang_optimization_level_t = 1;
pub const glslang_optimization_level_t_GLSLANG_OPT_SIMPLE: glslang_optimization_level_t = 2;
pub const glslang_optimization_level_t_GLSLANG_OPT_FULL: glslang_optimization_level_t = 3;
pub const glslang_optimization_level_t_GLSLANG_OPT_LEVEL_COUNT: glslang_optimization_level_t = 4;
pub type glslang_optimization_level_t = ::std::os::raw::c_int;
pub const glslang_texture_sampler_transform_mode_t_GLSLANG_TEX_SAMP_TRANS_KEEP:
    glslang_texture_sampler_transform_mode_t = 0;
pub const glslang_texture_sampler_transform_mode_t_GLSLANG_TEX_SAMP_TRANS_UPGRADE_TEXTURE_REMOVE_SAMPLER : glslang_texture_sampler_transform_mode_t = 1 ;
pub const glslang_texture_sampler_transform_mode_t_GLSLANG_TEX_SAMP_TRANS_COUNT:
    glslang_texture_sampler_transform_mode_t = 2;
pub type glslang_texture_sampler_transform_mode_t = ::std::os::raw::c_int;
pub const glslang_messages_t_GLSLANG_MSG_DEFAULT_BIT: glslang_messages_t = 0;
pub const glslang_messages_t_GLSLANG_MSG_RELAXED_ERRORS_BIT: glslang_messages_t = 1;
pub const glslang_messages_t_GLSLANG_MSG_SUPPRESS_WARNINGS_BIT: glslang_messages_t = 2;
pub const glslang_messages_t_GLSLANG_MSG_AST_BIT: glslang_messages_t = 4;
pub const glslang_messages_t_GLSLANG_MSG_SPV_RULES_BIT: glslang_messages_t = 8;
pub const glslang_messages_t_GLSLANG_MSG_VULKAN_RULES_BIT: glslang_messages_t = 16;
pub const glslang_messages_t_GLSLANG_MSG_ONLY_PREPROCESSOR_BIT: glslang_messages_t = 32;
pub const glslang_messages_t_GLSLANG_MSG_READ_HLSL_BIT: glslang_messages_t = 64;
pub const glslang_messages_t_GLSLANG_MSG_CASCADING_ERRORS_BIT: glslang_messages_t = 128;
pub const glslang_messages_t_GLSLANG_MSG_KEEP_UNCALLED_BIT: glslang_messages_t = 256;
pub const glslang_messages_t_GLSLANG_MSG_HLSL_OFFSETS_BIT: glslang_messages_t = 512;
pub const glslang_messages_t_GLSLANG_MSG_DEBUG_INFO_BIT: glslang_messages_t = 1024;
pub const glslang_messages_t_GLSLANG_MSG_HLSL_ENABLE_16BIT_TYPES_BIT: glslang_messages_t = 2048;
pub const glslang_messages_t_GLSLANG_MSG_HLSL_LEGALIZATION_BIT: glslang_messages_t = 4096;
pub const glslang_messages_t_GLSLANG_MSG_HLSL_DX9_COMPATIBLE_BIT: glslang_messages_t = 8192;
pub const glslang_messages_t_GLSLANG_MSG_BUILTIN_SYMBOL_TABLE_BIT: glslang_messages_t = 16384;
pub const glslang_messages_t_GLSLANG_MSG_COUNT: glslang_messages_t = 16385;
pub type glslang_messages_t = ::std::os::raw::c_int;
pub const glslang_reflection_options_t_GLSLANG_REFLECTION_DEFAULT_BIT:
    glslang_reflection_options_t = 0;
pub const glslang_reflection_options_t_GLSLANG_REFLECTION_STRICT_ARRAY_SUFFIX_BIT:
    glslang_reflection_options_t = 1;
pub const glslang_reflection_options_t_GLSLANG_REFLECTION_BASIC_ARRAY_SUFFIX_BIT:
    glslang_reflection_options_t = 2;
pub const glslang_reflection_options_t_GLSLANG_REFLECTION_INTERMEDIATE_IOO_BIT:
    glslang_reflection_options_t = 4;
pub const glslang_reflection_options_t_GLSLANG_REFLECTION_SEPARATE_BUFFERS_BIT:
    glslang_reflection_options_t = 8;
pub const glslang_reflection_options_t_GLSLANG_REFLECTION_ALL_BLOCK_VARIABLES_BIT:
    glslang_reflection_options_t = 16;
pub const glslang_reflection_options_t_GLSLANG_REFLECTION_UNWRAP_IO_BLOCKS_BIT:
    glslang_reflection_options_t = 32;
pub const glslang_reflection_options_t_GLSLANG_REFLECTION_COUNT: glslang_reflection_options_t = 33;
pub type glslang_reflection_options_t = ::std::os::raw::c_int;
pub const glslang_profile_t_GLSLANG_BAD_PROFILE: glslang_profile_t = 0;
pub const glslang_profile_t_GLSLANG_NO_PROFILE: glslang_profile_t = 1;
pub const glslang_profile_t_GLSLANG_CORE_PROFILE: glslang_profile_t = 2;
pub const glslang_profile_t_GLSLANG_COMPATIBILITY_PROFILE: glslang_profile_t = 4;
pub const glslang_profile_t_GLSLANG_ES_PROFILE: glslang_profile_t = 8;
pub const glslang_profile_t_GLSLANG_PROFILE_COUNT: glslang_profile_t = 9;
pub type glslang_profile_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glslang_shader_s {
    _unused: [u8; 0],
}
pub type glslang_shader_t = glslang_shader_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glslang_program_s {
    _unused: [u8; 0],
}
pub type glslang_program_t = glslang_program_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glslang_limits_s {
    pub non_inductive_for_loops: bool,
    pub while_loops: bool,
    pub do_while_loops: bool,
    pub general_uniform_indexing: bool,
    pub general_attribute_matrix_vector_indexing: bool,
    pub general_varying_indexing: bool,
    pub general_sampler_indexing: bool,
    pub general_variable_indexing: bool,
    pub general_constant_matrix_vector_indexing: bool,
}
#[test]
fn bindgen_test_layout_glslang_limits_s() {
    assert_eq!(
        ::std::mem::size_of::<glslang_limits_s>(),
        9usize,
        concat!("Size of: ", stringify!(glslang_limits_s))
    );
    assert_eq!(
        ::std::mem::align_of::<glslang_limits_s>(),
        1usize,
        concat!("Alignment of ", stringify!(glslang_limits_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_limits_s>())).non_inductive_for_loops as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_limits_s),
            "::",
            stringify!(non_inductive_for_loops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glslang_limits_s>())).while_loops as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_limits_s),
            "::",
            stringify!(while_loops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glslang_limits_s>())).do_while_loops as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_limits_s),
            "::",
            stringify!(do_while_loops)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_limits_s>())).general_uniform_indexing as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_limits_s),
            "::",
            stringify!(general_uniform_indexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_limits_s>())).general_attribute_matrix_vector_indexing
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_limits_s),
            "::",
            stringify!(general_attribute_matrix_vector_indexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_limits_s>())).general_varying_indexing as *const _
                as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_limits_s),
            "::",
            stringify!(general_varying_indexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_limits_s>())).general_sampler_indexing as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_limits_s),
            "::",
            stringify!(general_sampler_indexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_limits_s>())).general_variable_indexing as *const _
                as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_limits_s),
            "::",
            stringify!(general_variable_indexing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_limits_s>())).general_constant_matrix_vector_indexing
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_limits_s),
            "::",
            stringify!(general_constant_matrix_vector_indexing)
        )
    );
}
pub type glslang_limits_t = glslang_limits_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glslang_resource_s {
    pub max_lights: ::std::os::raw::c_int,
    pub max_clip_planes: ::std::os::raw::c_int,
    pub max_texture_units: ::std::os::raw::c_int,
    pub max_texture_coords: ::std::os::raw::c_int,
    pub max_vertex_attribs: ::std::os::raw::c_int,
    pub max_vertex_uniform_components: ::std::os::raw::c_int,
    pub max_varying_floats: ::std::os::raw::c_int,
    pub max_vertex_texture_image_units: ::std::os::raw::c_int,
    pub max_combined_texture_image_units: ::std::os::raw::c_int,
    pub max_texture_image_units: ::std::os::raw::c_int,
    pub max_fragment_uniform_components: ::std::os::raw::c_int,
    pub max_draw_buffers: ::std::os::raw::c_int,
    pub max_vertex_uniform_vectors: ::std::os::raw::c_int,
    pub max_varying_vectors: ::std::os::raw::c_int,
    pub max_fragment_uniform_vectors: ::std::os::raw::c_int,
    pub max_vertex_output_vectors: ::std::os::raw::c_int,
    pub max_fragment_input_vectors: ::std::os::raw::c_int,
    pub min_program_texel_offset: ::std::os::raw::c_int,
    pub max_program_texel_offset: ::std::os::raw::c_int,
    pub max_clip_distances: ::std::os::raw::c_int,
    pub max_compute_work_group_count_x: ::std::os::raw::c_int,
    pub max_compute_work_group_count_y: ::std::os::raw::c_int,
    pub max_compute_work_group_count_z: ::std::os::raw::c_int,
    pub max_compute_work_group_size_x: ::std::os::raw::c_int,
    pub max_compute_work_group_size_y: ::std::os::raw::c_int,
    pub max_compute_work_group_size_z: ::std::os::raw::c_int,
    pub max_compute_uniform_components: ::std::os::raw::c_int,
    pub max_compute_texture_image_units: ::std::os::raw::c_int,
    pub max_compute_image_uniforms: ::std::os::raw::c_int,
    pub max_compute_atomic_counters: ::std::os::raw::c_int,
    pub max_compute_atomic_counter_buffers: ::std::os::raw::c_int,
    pub max_varying_components: ::std::os::raw::c_int,
    pub max_vertex_output_components: ::std::os::raw::c_int,
    pub max_geometry_input_components: ::std::os::raw::c_int,
    pub max_geometry_output_components: ::std::os::raw::c_int,
    pub max_fragment_input_components: ::std::os::raw::c_int,
    pub max_image_units: ::std::os::raw::c_int,
    pub max_combined_image_units_and_fragment_outputs: ::std::os::raw::c_int,
    pub max_combined_shader_output_resources: ::std::os::raw::c_int,
    pub max_image_samples: ::std::os::raw::c_int,
    pub max_vertex_image_uniforms: ::std::os::raw::c_int,
    pub max_tess_control_image_uniforms: ::std::os::raw::c_int,
    pub max_tess_evaluation_image_uniforms: ::std::os::raw::c_int,
    pub max_geometry_image_uniforms: ::std::os::raw::c_int,
    pub max_fragment_image_uniforms: ::std::os::raw::c_int,
    pub max_combined_image_uniforms: ::std::os::raw::c_int,
    pub max_geometry_texture_image_units: ::std::os::raw::c_int,
    pub max_geometry_output_vertices: ::std::os::raw::c_int,
    pub max_geometry_total_output_components: ::std::os::raw::c_int,
    pub max_geometry_uniform_components: ::std::os::raw::c_int,
    pub max_geometry_varying_components: ::std::os::raw::c_int,
    pub max_tess_control_input_components: ::std::os::raw::c_int,
    pub max_tess_control_output_components: ::std::os::raw::c_int,
    pub max_tess_control_texture_image_units: ::std::os::raw::c_int,
    pub max_tess_control_uniform_components: ::std::os::raw::c_int,
    pub max_tess_control_total_output_components: ::std::os::raw::c_int,
    pub max_tess_evaluation_input_components: ::std::os::raw::c_int,
    pub max_tess_evaluation_output_components: ::std::os::raw::c_int,
    pub max_tess_evaluation_texture_image_units: ::std::os::raw::c_int,
    pub max_tess_evaluation_uniform_components: ::std::os::raw::c_int,
    pub max_tess_patch_components: ::std::os::raw::c_int,
    pub max_patch_vertices: ::std::os::raw::c_int,
    pub max_tess_gen_level: ::std::os::raw::c_int,
    pub max_viewports: ::std::os::raw::c_int,
    pub max_vertex_atomic_counters: ::std::os::raw::c_int,
    pub max_tess_control_atomic_counters: ::std::os::raw::c_int,
    pub max_tess_evaluation_atomic_counters: ::std::os::raw::c_int,
    pub max_geometry_atomic_counters: ::std::os::raw::c_int,
    pub max_fragment_atomic_counters: ::std::os::raw::c_int,
    pub max_combined_atomic_counters: ::std::os::raw::c_int,
    pub max_atomic_counter_bindings: ::std::os::raw::c_int,
    pub max_vertex_atomic_counter_buffers: ::std::os::raw::c_int,
    pub max_tess_control_atomic_counter_buffers: ::std::os::raw::c_int,
    pub max_tess_evaluation_atomic_counter_buffers: ::std::os::raw::c_int,
    pub max_geometry_atomic_counter_buffers: ::std::os::raw::c_int,
    pub max_fragment_atomic_counter_buffers: ::std::os::raw::c_int,
    pub max_combined_atomic_counter_buffers: ::std::os::raw::c_int,
    pub max_atomic_counter_buffer_size: ::std::os::raw::c_int,
    pub max_transform_feedback_buffers: ::std::os::raw::c_int,
    pub max_transform_feedback_interleaved_components: ::std::os::raw::c_int,
    pub max_cull_distances: ::std::os::raw::c_int,
    pub max_combined_clip_and_cull_distances: ::std::os::raw::c_int,
    pub max_samples: ::std::os::raw::c_int,
    pub max_mesh_output_vertices_nv: ::std::os::raw::c_int,
    pub max_mesh_output_primitives_nv: ::std::os::raw::c_int,
    pub max_mesh_work_group_size_x_nv: ::std::os::raw::c_int,
    pub max_mesh_work_group_size_y_nv: ::std::os::raw::c_int,
    pub max_mesh_work_group_size_z_nv: ::std::os::raw::c_int,
    pub max_task_work_group_size_x_nv: ::std::os::raw::c_int,
    pub max_task_work_group_size_y_nv: ::std::os::raw::c_int,
    pub max_task_work_group_size_z_nv: ::std::os::raw::c_int,
    pub max_mesh_view_count_nv: ::std::os::raw::c_int,
    pub limits: glslang_limits_t,
}
#[test]
fn bindgen_test_layout_glslang_resource_s() {
    assert_eq!(
        ::std::mem::size_of::<glslang_resource_s>(),
        380usize,
        concat!("Size of: ", stringify!(glslang_resource_s))
    );
    assert_eq!(
        ::std::mem::align_of::<glslang_resource_s>(),
        4usize,
        concat!("Alignment of ", stringify!(glslang_resource_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glslang_resource_s>())).max_lights as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_lights)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_clip_planes as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_clip_planes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_texture_units as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_texture_units)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_texture_coords as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_texture_coords)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_vertex_attribs as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_vertex_attribs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_vertex_uniform_components as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_vertex_uniform_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_varying_floats as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_varying_floats)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_vertex_texture_image_units
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_vertex_texture_image_units)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_combined_texture_image_units
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_combined_texture_image_units)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_texture_image_units as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_texture_image_units)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_fragment_uniform_components
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_fragment_uniform_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_draw_buffers as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_draw_buffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_vertex_uniform_vectors as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_vertex_uniform_vectors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_varying_vectors as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_varying_vectors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_fragment_uniform_vectors as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_fragment_uniform_vectors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_vertex_output_vectors as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_vertex_output_vectors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_fragment_input_vectors as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_fragment_input_vectors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).min_program_texel_offset as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(min_program_texel_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_program_texel_offset as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_program_texel_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_clip_distances as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_clip_distances)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_compute_work_group_count_x
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_compute_work_group_count_x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_compute_work_group_count_y
                as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_compute_work_group_count_y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_compute_work_group_count_z
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_compute_work_group_count_z)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_compute_work_group_size_x as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_compute_work_group_size_x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_compute_work_group_size_y as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_compute_work_group_size_y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_compute_work_group_size_z as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_compute_work_group_size_z)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_compute_uniform_components
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_compute_uniform_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_compute_texture_image_units
                as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_compute_texture_image_units)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_compute_image_uniforms as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_compute_image_uniforms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_compute_atomic_counters as *const _
                as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_compute_atomic_counters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_compute_atomic_counter_buffers
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_compute_atomic_counter_buffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_varying_components as *const _
                as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_varying_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_vertex_output_components as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_vertex_output_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_geometry_input_components as *const _
                as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_geometry_input_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_geometry_output_components
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_geometry_output_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_fragment_input_components as *const _
                as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_fragment_input_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_image_units as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_image_units)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>()))
                .max_combined_image_units_and_fragment_outputs as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_combined_image_units_and_fragment_outputs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_combined_shader_output_resources
                as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_combined_shader_output_resources)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_image_samples as *const _ as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_image_samples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_vertex_image_uniforms as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_vertex_image_uniforms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_tess_control_image_uniforms
                as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_tess_control_image_uniforms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_tess_evaluation_image_uniforms
                as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_tess_evaluation_image_uniforms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_geometry_image_uniforms as *const _
                as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_geometry_image_uniforms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_fragment_image_uniforms as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_fragment_image_uniforms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_combined_image_uniforms as *const _
                as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_combined_image_uniforms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_geometry_texture_image_units
                as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_geometry_texture_image_units)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_geometry_output_vertices as *const _
                as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_geometry_output_vertices)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_geometry_total_output_components
                as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_geometry_total_output_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_geometry_uniform_components
                as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_geometry_uniform_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_geometry_varying_components
                as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_geometry_varying_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_tess_control_input_components
                as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_tess_control_input_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_tess_control_output_components
                as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_tess_control_output_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_tess_control_texture_image_units
                as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_tess_control_texture_image_units)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_tess_control_uniform_components
                as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_tess_control_uniform_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_tess_control_total_output_components
                as *const _ as usize
        },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_tess_control_total_output_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_tess_evaluation_input_components
                as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_tess_evaluation_input_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_tess_evaluation_output_components
                as *const _ as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_tess_evaluation_output_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_tess_evaluation_texture_image_units
                as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_tess_evaluation_texture_image_units)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_tess_evaluation_uniform_components
                as *const _ as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_tess_evaluation_uniform_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_tess_patch_components as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_tess_patch_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_patch_vertices as *const _ as usize
        },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_patch_vertices)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_tess_gen_level as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_tess_gen_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_viewports as *const _ as usize
        },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_viewports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_vertex_atomic_counters as *const _
                as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_vertex_atomic_counters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_tess_control_atomic_counters
                as *const _ as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_tess_control_atomic_counters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_tess_evaluation_atomic_counters
                as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_tess_evaluation_atomic_counters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_geometry_atomic_counters as *const _
                as usize
        },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_geometry_atomic_counters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_fragment_atomic_counters as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_fragment_atomic_counters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_combined_atomic_counters as *const _
                as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_combined_atomic_counters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_atomic_counter_bindings as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_atomic_counter_bindings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_vertex_atomic_counter_buffers
                as *const _ as usize
        },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_vertex_atomic_counter_buffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_tess_control_atomic_counter_buffers
                as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_tess_control_atomic_counter_buffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>()))
                .max_tess_evaluation_atomic_counter_buffers as *const _ as usize
        },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_tess_evaluation_atomic_counter_buffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_geometry_atomic_counter_buffers
                as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_geometry_atomic_counter_buffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_fragment_atomic_counter_buffers
                as *const _ as usize
        },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_fragment_atomic_counter_buffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_combined_atomic_counter_buffers
                as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_combined_atomic_counter_buffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_atomic_counter_buffer_size
                as *const _ as usize
        },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_atomic_counter_buffer_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_transform_feedback_buffers
                as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_transform_feedback_buffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>()))
                .max_transform_feedback_interleaved_components as *const _ as usize
        },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_transform_feedback_interleaved_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_cull_distances as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_cull_distances)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_combined_clip_and_cull_distances
                as *const _ as usize
        },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_combined_clip_and_cull_distances)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glslang_resource_s>())).max_samples as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_samples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_mesh_output_vertices_nv as *const _
                as usize
        },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_mesh_output_vertices_nv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_mesh_output_primitives_nv as *const _
                as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_mesh_output_primitives_nv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_mesh_work_group_size_x_nv as *const _
                as usize
        },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_mesh_work_group_size_x_nv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_mesh_work_group_size_y_nv as *const _
                as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_mesh_work_group_size_y_nv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_mesh_work_group_size_z_nv as *const _
                as usize
        },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_mesh_work_group_size_z_nv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_task_work_group_size_x_nv as *const _
                as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_task_work_group_size_x_nv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_task_work_group_size_y_nv as *const _
                as usize
        },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_task_work_group_size_y_nv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_task_work_group_size_z_nv as *const _
                as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_task_work_group_size_z_nv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_resource_s>())).max_mesh_view_count_nv as *const _
                as usize
        },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(max_mesh_view_count_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glslang_resource_s>())).limits as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_resource_s),
            "::",
            stringify!(limits)
        )
    );
}
pub type glslang_resource_t = glslang_resource_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glslang_input_s {
    pub language: glslang_source_t,
    pub stage: glslang_stage_t,
    pub client: glslang_client_t,
    pub client_version: glslang_target_client_version_t,
    pub target_language: glslang_target_language_t,
    pub target_language_version: glslang_target_language_version_t,
    #[doc = " Shader source code"]
    pub code: *const ::std::os::raw::c_char,
    pub default_version: ::std::os::raw::c_int,
    pub default_profile: glslang_profile_t,
    pub force_default_version_and_profile: ::std::os::raw::c_int,
    pub forward_compatible: ::std::os::raw::c_int,
    pub messages: glslang_messages_t,
    pub resource: *const glslang_resource_t,
}
#[test]
fn bindgen_test_layout_glslang_input_s() {
    assert_eq!(
        ::std::mem::size_of::<glslang_input_s>(),
        64usize,
        concat!("Size of: ", stringify!(glslang_input_s))
    );
    assert_eq!(
        ::std::mem::align_of::<glslang_input_s>(),
        8usize,
        concat!("Alignment of ", stringify!(glslang_input_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glslang_input_s>())).language as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_input_s),
            "::",
            stringify!(language)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glslang_input_s>())).stage as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_input_s),
            "::",
            stringify!(stage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glslang_input_s>())).client as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_input_s),
            "::",
            stringify!(client)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glslang_input_s>())).client_version as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_input_s),
            "::",
            stringify!(client_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glslang_input_s>())).target_language as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_input_s),
            "::",
            stringify!(target_language)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_input_s>())).target_language_version as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_input_s),
            "::",
            stringify!(target_language_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glslang_input_s>())).code as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_input_s),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glslang_input_s>())).default_version as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_input_s),
            "::",
            stringify!(default_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glslang_input_s>())).default_profile as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_input_s),
            "::",
            stringify!(default_profile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_input_s>())).force_default_version_and_profile
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_input_s),
            "::",
            stringify!(force_default_version_and_profile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glslang_input_s>())).forward_compatible as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_input_s),
            "::",
            stringify!(forward_compatible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glslang_input_s>())).messages as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_input_s),
            "::",
            stringify!(messages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<glslang_input_s>())).resource as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(glslang_input_s),
            "::",
            stringify!(resource)
        )
    );
}
pub type glslang_input_t = glslang_input_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glsl_include_result_s {
    pub header_name: *const ::std::os::raw::c_char,
    pub header_data: *const ::std::os::raw::c_char,
    pub header_length: size_t,
}
#[test]
fn bindgen_test_layout_glsl_include_result_s() {
    assert_eq!(
        ::std::mem::size_of::<glsl_include_result_s>(),
        24usize,
        concat!("Size of: ", stringify!(glsl_include_result_s))
    );
    assert_eq!(
        ::std::mem::align_of::<glsl_include_result_s>(),
        8usize,
        concat!("Alignment of ", stringify!(glsl_include_result_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glsl_include_result_s>())).header_name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(glsl_include_result_s),
            "::",
            stringify!(header_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glsl_include_result_s>())).header_data as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(glsl_include_result_s),
            "::",
            stringify!(header_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glsl_include_result_s>())).header_length as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(glsl_include_result_s),
            "::",
            stringify!(header_length)
        )
    );
}
pub type glsl_include_result_t = glsl_include_result_s;
pub type glsl_include_local_func = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        header_name: *const ::std::os::raw::c_char,
        includer_name: *const ::std::os::raw::c_char,
        include_depth: size_t,
    ) -> *mut glsl_include_result_t,
>;
pub type glsl_include_system_func = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        header_name: *const ::std::os::raw::c_char,
        includer_name: *const ::std::os::raw::c_char,
        include_depth: size_t,
    ) -> *mut glsl_include_result_t,
>;
pub type glsl_free_include_result_func = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        result: *mut glsl_include_result_t,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct glsl_include_callbacks_s {
    pub include_system: glsl_include_system_func,
    pub include_local: glsl_include_local_func,
    pub free_include_result: glsl_free_include_result_func,
}
#[test]
fn bindgen_test_layout_glsl_include_callbacks_s() {
    assert_eq!(
        ::std::mem::size_of::<glsl_include_callbacks_s>(),
        24usize,
        concat!("Size of: ", stringify!(glsl_include_callbacks_s))
    );
    assert_eq!(
        ::std::mem::align_of::<glsl_include_callbacks_s>(),
        8usize,
        concat!("Alignment of ", stringify!(glsl_include_callbacks_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glsl_include_callbacks_s>())).include_system as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(glsl_include_callbacks_s),
            "::",
            stringify!(include_system)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glsl_include_callbacks_s>())).include_local as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(glsl_include_callbacks_s),
            "::",
            stringify!(include_local)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<glsl_include_callbacks_s>())).free_include_result as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(glsl_include_callbacks_s),
            "::",
            stringify!(free_include_result)
        )
    );
}
pub type glsl_include_callbacks_t = glsl_include_callbacks_s;
extern "C" {
    pub fn glslang_initialize_process() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glslang_finalize_process();
}
extern "C" {
    pub fn glslang_shader_create(input: *const glslang_input_t) -> *mut glslang_shader_t;
}
extern "C" {
    pub fn glslang_shader_delete(shader: *mut glslang_shader_t);
}
extern "C" {
    pub fn glslang_shader_preprocess(
        shader: *mut glslang_shader_t,
        input: *const glslang_input_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glslang_shader_parse(
        shader: *mut glslang_shader_t,
        input: *const glslang_input_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glslang_shader_get_preprocessed_code(
        shader: *mut glslang_shader_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glslang_shader_get_info_log(
        shader: *mut glslang_shader_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glslang_shader_get_info_debug_log(
        shader: *mut glslang_shader_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glslang_program_create() -> *mut glslang_program_t;
}
extern "C" {
    pub fn glslang_program_delete(program: *mut glslang_program_t);
}
extern "C" {
    pub fn glslang_program_add_shader(
        program: *mut glslang_program_t,
        shader: *mut glslang_shader_t,
    );
}
extern "C" {
    pub fn glslang_program_link(
        program: *mut glslang_program_t,
        messages: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glslang_program_SPIRV_generate(program: *mut glslang_program_t, stage: glslang_stage_t);
}
extern "C" {
    pub fn glslang_program_SPIRV_get_size(program: *mut glslang_program_t) -> size_t;
}
extern "C" {
    pub fn glslang_program_SPIRV_get(
        program: *mut glslang_program_t,
        arg1: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn glslang_program_SPIRV_get_ptr(
        program: *mut glslang_program_t,
    ) -> *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub fn glslang_program_SPIRV_get_messages(
        program: *mut glslang_program_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glslang_program_get_info_log(
        program: *mut glslang_program_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glslang_program_get_info_debug_log(
        program: *mut glslang_program_t,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
